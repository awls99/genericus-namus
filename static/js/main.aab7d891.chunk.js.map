{"version":3,"sources":["models/models.js","Components/CharCard.tsx","Components/Roster.tsx","reportWebVitals.ts","Components/TopBar.tsx","index.tsx"],"names":["exports","__esModule","MediaType","CharChard","character","mediaUrl","media","find","asset","key","INSET","value","Card","CardMedia","component","image","CardContent","Typography","gutterBottom","variant","name","color","level","playable_class","en_GB","Roster","filteredRoster","roster","filter","char","Grid","container","spacing","xs","md","columns","sm","map","index","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TopBar","AppBar","position","Toolbar","Avatar","alt","src","theme","createTheme","palette","mode","primary","main","grey","secondary","ReactDOM","render","StrictMode","CssBaseline","ThemeProvider","document","getElementById"],"mappings":"yk0EACAA,EAAQC,YAAa,EACrBD,EAAQE,eAAY,EAEpB,SAAWA,GACPA,EAAS,OAAa,SACtBA,EAAS,MAAY,QACrBA,EAAS,KAAW,OACpBA,EAAS,QAAc,WAJ3B,CAKeF,EAAQE,YAAcF,EAAQE,UAAY,M,mJCqB1CC,MAtBf,SAAmBC,GAA+B,IAAD,QACzCC,EAAQ,UAAGD,EAAUE,aAAb,iBAAG,EAAiBC,MAAK,SAACC,GAAY,OAAOA,EAAMC,MAAQP,YAAUQ,gBAArE,aAAG,EAA4EC,MAC7F,OACE,cAAC,IAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,UAAU,MACVC,MAAOV,IAET,eAACW,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKL,UAAU,MAAhD,SACGV,EAAUgB,OAEb,eAACH,EAAA,EAAD,CAAYE,QAAQ,QAAQE,MAAM,iBAAlC,mBACSjB,EAAUkB,MADnB,cAC2BlB,EAAUmB,sBADrC,iBAC2B,EAA0BH,YADrD,aAC2B,EAAgCI,kBCFtDC,MAff,WACE,IAAMC,EAAsCC,EAAOC,QAAO,SAACC,GAAW,OAAsB,KAAfA,EAAKP,SAClF,OACE,cAACQ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKC,QAAS,CAAEF,GAAI,EAAGG,GAAI,EAAGF,GAAI,IAAxE,SACGR,EAAeW,KAAI,SAACR,EAAMS,GACzB,OACE,cAACR,EAAA,EAAD,CAAMS,MAAI,EAACN,GAAI,EAAGG,GAAI,EAAGF,GAAI,EAA7B,SACG/B,EAAU0B,IADwBS,SCGhCE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gDCWCQ,MAbf,WACE,OACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,CAASjC,QAAQ,QAAjB,UACA,cAACkC,EAAA,EAAD,CAAQC,IAAI,wBAAwBC,IAAI,uEACtC,cAACtC,EAAA,EAAD,CAAYE,QAAQ,KAAKE,MAAM,UAAUP,UAAU,MAAnD,kCCAF0C,EAAQC,YAAY,CACxBC,QAAS,CACPC,KAAM,OACNC,QAAS,CACPC,KAAMC,IAAK,MAEbC,UAAW,CACTF,KAAMC,IAAK,SAIjBE,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CAAeZ,MAAOA,EAAtB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UAGJa,SAASC,eAAe,SAM1B9B,M","file":"static/js/main.aab7d891.chunk.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.MediaType = void 0;\nvar MediaType;\n(function (MediaType) {\n    MediaType[\"AVATAR\"] = \"avatar\";\n    MediaType[\"INSET\"] = \"inset\";\n    MediaType[\"MAIN\"] = \"main\";\n    MediaType[\"MAINRAW\"] = \"main-raw\";\n})(MediaType = exports.MediaType || (exports.MediaType = {}));\n","import React from 'react';\nimport Item from \"@mui/material/Grid\";\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport { EnrichedCharacter, MediaType } from '../models/models';\n\nfunction CharChard(character: EnrichedCharacter) {\n  const mediaUrl = character.media?.find((asset) => { return asset.key === MediaType.INSET })?.value;\n  return (\n    <Item>\n      <Card>\n        <CardMedia\n          component=\"img\"\n          image={mediaUrl}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {character.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Level {character.level} {character.playable_class?.name?.en_GB}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Item>\n  );\n}\n\nexport default CharChard;\n","import React from 'react';\nimport roster from \"../json/roster.json\";\nimport Grid from \"@mui/material/Grid/Grid\";\nimport CharChard from './CharCard';\nimport { EnrichedCharacter } from '../models/models';\nfunction Roster() {\n  const filteredRoster: EnrichedCharacter[] = roster.filter((char) => { return char.level === 60 });\n  return (\n    <Grid container spacing={{ xs: 1, md: 2 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n      {filteredRoster.map((char, index) => {\n        return (\n          <Grid item xs={2} sm={4} md={4} key={index}>\n            {CharChard(char)}\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n}\n\nexport default Roster;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport AppBar from \"@mui/material/AppBar/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar/Toolbar\";\nimport Typography from '@mui/material/Typography';\nimport Avatar from \"@mui/material/Avatar/Avatar\";\n\n\nfunction TopBar() {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar variant=\"dense\">\n      <Avatar alt=\"Genericus Namus Crest\" src=\"https://render-eu.worldofwarcraft.com/guild/tabards/emblem_181.png\" />\n        <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n          Generics Namus\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default TopBar;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport CssBaseline from '@mui/material/CssBaseline';\n// import App from './App';\nimport Roster from './Components/Roster';\nimport reportWebVitals from './reportWebVitals';\nimport { createTheme } from '@mui/material/styles';\nimport { grey } from '@mui/material/colors';\nimport ThemeProvider from \"@mui/material/styles/ThemeProvider\";\nimport TopBar from './Components/TopBar';\n\nconst theme = createTheme({\n  palette: {\n    mode: \"dark\",\n    primary: {\n      main: grey[900],\n    },\n    secondary: {\n      main: grey[700],\n    },\n  },\n});\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n      <TopBar/>\n      <Roster />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}